package com.hexaware.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.hexaware.entity.Loan;
import com.hexaware.exception.InvalidLoanException;
import com.hexaware.util.DBConnUtil;

public class ILoanRepositoryImpl implements ILoanRepository {

//	private Connection connection;
//
//	public ILoanRepositoryImpl() {
//		this.connection = DBConnUtil.getConnection();
//	}

	private static final String APPLY_LOAN_QUERY = "INSERT INTO Loan (loanId, customerId, principalAmount, interestRate, loanTerm, loanType, loanStatus) VALUES (?, ?, ?, ?, ?, ?, ?)";
    private static final String CALCULATE_INTEREST_QUERY = "SELECT principalAmount * interestRate * loanTerm / 12 AS interest FROM Loan WHERE loanId = ?";
    private static final String LOAN_STATUS_QUERY = "SELECT loanStatus FROM Loan WHERE loanId = ?";
    private static final String CALCULATE_EMI_QUERY = "SELECT (principalAmount * interestRate * POWER(1 + interestRate, loanTerm)) / (POWER(1 + interestRate, loanTerm) - 1) AS emi FROM Loan WHERE loanId = ?";
    private static final String LOAN_REPAYMENT_QUERY = "UPDATE Loan SET loanStatus = 'Repaid' WHERE loanId = ?";
    private static final String GET_ALL_LOANS_QUERY = "SELECT * FROM Loan";
    private static final String GET_LOAN_BY_ID_QUERY = "SELECT * FROM Loan WHERE loanId = ?";

    @Override
    public boolean applyLoan(Loan loan) throws InvalidLoanException {
        try (Connection connection = DBConnUtil.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(APPLY_LOAN_QUERY)) {
            preparedStatement.setInt(1, loan.getLoanId());
            preparedStatement.setInt(2, loan.getCustomerId());
            preparedStatement.setDouble(3, loan.getPrincipalAmount());
            preparedStatement.setDouble(4, loan.getInterestRate());
            preparedStatement.setInt(5, loan.getLoanTerm());
            preparedStatement.setString(6, loan.getLoanType());
            preparedStatement.setString(7, loan.getLoanStatus());

            int rowsAffected = preparedStatement.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            throw new InvalidLoanException("Error applying for loan", e);
        }
    }

    @Override
    public double calculateInterest(int loanId) throws InvalidLoanException {
        try (Connection connection = DBConnUtil.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(CALCULATE_INTEREST_QUERY)) {
            preparedStatement.setInt(1, loanId);
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                return resultSet.getDouble("interest");
            } else {
                throw new InvalidLoanException("Loan not found with ID: " + loanId);
            }
        } catch (SQLException e) {
            throw new InvalidLoanException("Error calculating interest", e);
        }
    }

    @Override
    public double calculateInterest(int loanId, double principalAmount, double interestRate, int loanTenure) throws InvalidLoanException {
        // Additional implementation for calculating interest with provided parameters
        return (principalAmount * interestRate * loanTenure) / 12;
    }

    @Override
    public void loanStatus(int loanId) throws InvalidLoanException {
        try (Connection connection = DBConnUtil.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(LOAN_STATUS_QUERY)) {
            preparedStatement.setLong(1, loanId);
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                System.out.println("Loan Status: " + resultSet.getString("loanStatus"));
            } else {
                throw new InvalidLoanException("Loan not found with ID: " + loanId);
            }
        } catch (SQLException e) {
            throw new InvalidLoanException("Error fetching loan status", e);
        }
    }

    @Override
    public double calculateEMI(int loanId) throws InvalidLoanException {
        try (Connection connection = DBConnUtil.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(CALCULATE_EMI_QUERY)) {
            preparedStatement.setLong(1, loanId);
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                return resultSet.getDouble("emi");
            } else {
                throw new InvalidLoanException("Loan not found with ID: " + loanId);
            }
        } catch (SQLException e) {
            throw new InvalidLoanException("Error calculating EMI", e);
        }
    }

    @Override
    public double calculateEMI(int loanId, double principalAmount, double interestRate, int loanTenure) throws InvalidLoanException {
        // Additional implementation for calculating EMI with provided parameters
        return (principalAmount * interestRate * Math.pow(1 + interestRate, loanTenure)) / (Math.pow(1 + interestRate, loanTenure) - 1);
    }

    @Override
    public int loanRepayment(int loanId, double amount) throws InvalidLoanException {
        try (Connection connection = DBConnUtil.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(LOAN_REPAYMENT_QUERY)) {
            preparedStatement.setLong(1, loanId);
            return preparedStatement.executeUpdate();
        } catch (SQLException e) {
            throw new InvalidLoanException("Error updating loan repayment", e);
        }
    }

    @Override
    public List<Loan> getAllLoans() {
        List<Loan> loans = new ArrayList<>();
        try (Connection connection = DBConnUtil.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(GET_ALL_LOANS_QUERY);
             ResultSet resultSet = preparedStatement.executeQuery()) {

            while (resultSet.next()) {
                Loan loan = extractLoanFromResultSet(resultSet);
                loans.add(loan);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return loans;
    }

    @Override
    public Loan getLoanById(int loanId) throws InvalidLoanException {
        try (Connection connection = DBConnUtil.getConnection();
             PreparedStatement preparedStatement = connection.prepareStatement(GET_LOAN_BY_ID_QUERY)) {
            preparedStatement.setLong(1, loanId);
            ResultSet resultSet = preparedStatement.executeQuery();

            if (resultSet.next()) {
                return extractLoanFromResultSet(resultSet);
            } else {
                throw new InvalidLoanException("Loan not found with ID: " + loanId);
            }
        } catch (SQLException e) {
            throw new InvalidLoanException("Error fetching loan by ID", e);
        }
    }

    private Loan extractLoanFromResultSet(ResultSet resultSet) throws SQLException {
        Loan loan = new Loan();
        loan.setLoanId(resultSet.getInt("loanId"));
        loan.setCustomerId(resultSet.getInt("customerId"));
        loan.setPrincipalAmount(resultSet.getDouble("principalAmount"));
        loan.setInterestRate(resultSet.getDouble("interestRate"));
        loan.setLoanTerm(resultSet.getInt("loanTerm"));
        loan.setLoanType(resultSet.getString("loanType"));
        loan.setLoanStatus(resultSet.getString("loanStatus"));
        return loan;
    }

}
