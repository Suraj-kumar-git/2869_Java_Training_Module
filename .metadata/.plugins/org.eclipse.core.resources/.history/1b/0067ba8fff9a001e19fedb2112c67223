package TicketBookingSystem;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Scanner;

class Passenger2{
	int pid;
	String pName;
	String dob;
	int age;
	String gender;
	double cost;
	public Passenger2(int pid, String pName, String dob, int age, String gender, double cost) {
		super();
		this.pid = pid;
		this.pName = pName;
		this.dob = dob;
		this.age = age;
		this.gender = gender;
		this.cost = cost;
	}
	public int getPid() {
		return pid;
	}
	public void setPid(int pid) {
		this.pid = pid;
	}
	public String getpName() {
		return pName;
	}
	public void setpName(String pName) {
		this.pName = pName;
	}
	public String getDob() {
		return dob;
	}
	public void setDob(String dob) {
		this.dob = dob;
	}
	public int getAge() {
		return age;
	}
	public void setAge(int age) {
		this.age = age;
	}
	public String getGender() {
		return gender;
	}
	public void setGender(String gender) {
		this.gender = gender;
	}
	public double getCost() {
		return cost;
	}
	public void setCost(double cost) {
		this.cost = cost;
	}
	

	
}
public class TBS_Approach2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Scanner scn = new Scanner(System.in);
		System.out.println("enter the total number of seats initially..");
		int seat = scn.nextInt();
		int curSeat = 0;
		ArrayList<Passenger> list = new ArrayList<>();
		boolean flag = true;
		
		while(seat!=0) {
			
			System.out.println("enter the passenger details");
			System.out.println("enter the passenger id");
			int id = scn.nextInt();
			System.out.println("enter the passenger name");
			scn.nextLine();
			String pn = scn.nextLine();
			
			System.out.println("enter the passenger dob in dd-MMM-yyyy ");
			String pd = scn.nextLine();
			//scn.nextLine();
			System.out.println("enter the genger");
			String pg = scn.nextLine();
			int age = getAge(pd);
			System.out.println("enter total tickets needed to book");
			int book = scn.nextInt();
			 if(seat-book < 0) {
				 System.out.println("seat reamining is: "+ seat);
				 System.out.println("enter details again...");
				 continue;
			 }else {
				 int t = book;
				 double total_fare=0;
				 while(t-->0) {
					 total_fare += getFare(age, book, pg, curSeat, seat);
					 curSeat++;
					 seat--;
				 }
				 Passenger2 p = new Passenger2(id,pn,pd,age,pg,total_fare);
				 list.add(p);
			 }
		}
		for(Passenger pas : list) {
			System.out.println("passenger id: "+ pas.pid +"\n passenger name: "+ pas.pName+"\n passenger dob: "+pas.dob+"\n passenger age: "+ pas.age+
					"\n passenger gender: "+ pas.gender+"\n passenger total fare: "+ pas.cost);
		}
	}
	private static double getFare(int age, int book, String pg, int curSeat, int seat) {
		// ticket price is 100 per seat
		String gen = "female";
		//double fdis = 14.7;
		//double sdic = 10;
		//double ex1 = 18;
		//double ex2 = 32;
		double dis = 0;
		double extra = 0;
		double tot = 0;
		
		
		if( ((double) curSeat * 100/seat) > 50 && ((double) curSeat * 100/seat) < 75 ) { // 0.75 * seat > curSeat
			extra += 18; 
		}else if(((double) curSeat * 100/seat) >  75) {
			extra += 32;
		}
		if(age > 65) {
			dis += 10;
		}
		if(gen.equalsIgnoreCase(pg)) {
			dis += 14.7;
		}
		tot = 100;
		tot += (tot * extra)/100 ;
		tot -= (tot * dis)/100;
		return tot;
	}
	
	private static int getAge(String pd) {
		int cage=0;
		 SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy");
	        try {
	            Date dob = dateFormat.parse(pd);

	            // Get the current date
	            Calendar currentDate = Calendar.getInstance();
	            Date now = currentDate.getTime();

	             cage = calculateAge(dob, now);

	        } catch (ParseException e) {
	            System.err.println("Error parsing the date of birth. Please use the format dd-MMM-yyyy.");
	        }
	    
		return cage;
	}
	
	private static int calculateAge(Date birthDate, Date currentDate) {
        Calendar birthCalendar = Calendar.getInstance();
        birthCalendar.setTime(birthDate);

        Calendar currentCalendar = Calendar.getInstance();
        currentCalendar.setTime(currentDate);

        int years = currentCalendar.get(Calendar.YEAR) - birthCalendar.get(Calendar.YEAR);
        if (currentCalendar.get(Calendar.DAY_OF_YEAR) < birthCalendar.get(Calendar.DAY_OF_YEAR)) {
            years--;
        }

        return years;
    }
	
}
