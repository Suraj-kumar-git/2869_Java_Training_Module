package com.hexaware.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.hexaware.entity.Artist;
import com.hexaware.entity.Artwork;
import com.hexaware.entity.Gallery;
import com.hexaware.entity.User;
import com.hexaware.exception.UserNotFoundException;
import com.hexaware.util.DBConnUtil;
import com.hexaware.util.DBPropertyUtil;

public class VirtualArtGalleryImpl implements IVirtualArtGallery {
	private Connection connection;
	public static boolean isLoggedIn=false;
    public VirtualArtGalleryImpl() {
        this.connection = DBConnUtil.getConnection();
    }

    @Override
    public boolean addArtwork(Artwork artwork) {
    	if (!isLoggedIn) {
            // User is not logged in, cannot retrieve favorite artworks
            return false;
        }
        String query = "INSERT INTO Artwork (ArtworkID, Title, Description, CreationDate, Medium, ImageURL) VALUES (?, ?, ?, ?, ?, ?)";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, artwork.getArtworkId());
            preparedStatement.setString(2, artwork.getTitle());
            preparedStatement.setString(3, artwork.getDesc());
            preparedStatement.setDate(4, java.sql.Date.valueOf(artwork.getCreationDate()));
            preparedStatement.setString(5, artwork.getMedium());
            preparedStatement.setString(6, artwork.getImageURL());

            int rowsAffected = preparedStatement.executeUpdate();
            return rowsAffected > 0; // Return true if the artwork is added successfully
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception or throw a custom exception if needed
            return false;
        }
    }

    @Override
    public boolean updateArtwork(Artwork artwork) {
    	if (!isLoggedIn) {
            // User is not logged in, cannot retrieve favorite artworks
            return false;
        }
        String query = "UPDATE Artwork SET Title = ?, Description = ?, CreationDate = ?, Medium = ?, ImageURL = ? WHERE ArtworkID = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, artwork.getTitle());
            preparedStatement.setString(2, artwork.getDesc());
            preparedStatement.setDate(3, new java.sql.Date(artwork.getCreationDate().getTime()));
            preparedStatement.setString(4, artwork.getMedium());
            preparedStatement.setString(5, artwork.getImageURL());
            preparedStatement.setInt(6, artwork.getArtworkId());

            int rowsAffected = preparedStatement.executeUpdate();
            return rowsAffected > 0; // Return true if the artwork is updated successfully
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception or throw a custom exception if needed
            return false;
        }
    }

    @Override
    public boolean removeArtwork(int artworkId) {
    	if (!isLoggedIn) {
            // User is not logged in, cannot retrieve favorite artworks
            return false;
        }
        String query = "DELETE FROM Artwork WHERE ArtworkID = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, artworkId);

            int rowsAffected = preparedStatement.executeUpdate();
            return rowsAffected > 0; // Return true if the artwork is removed successfully
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception or throw a custom exception if needed
            return false;
        }
    }

    @Override
    public Artwork getArtworkById(int artworkId) {
        String query = "SELECT * FROM Artwork WHERE ArtworkID = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, artworkId);

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    Artwork artwork = new Artwork();
                    artwork.setArtworkId(resultSet.getInt("ArtworkID"));
                    artwork.setTitle(resultSet.getString("Title"));
                    artwork.setDesc(resultSet.getString("Description"));
                    artwork.setCreationDate(resultSet.getDate("CreationDate"));
                    artwork.setMedium(resultSet.getString("Medium"));
                    artwork.setImageURL(resultSet.getString("ImageURL"));
                    return artwork;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception or throw a custom exception if needed
        }

        return null; // Return null if artwork with the specified ID is not found
    }
	
    @Override
    public List<Artwork> searchArtworks(String keyword) {
        List<Artwork> artworks = new ArrayList<>();
        String query = "SELECT * FROM Artwork WHERE Title LIKE ? OR Description LIKE ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, "%" + keyword + "%");
            preparedStatement.setString(2, "%" + keyword + "%");

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                while (resultSet.next()) {
                    Artwork artwork = new Artwork();
                    artwork.setArtworkId(resultSet.getInt("ArtworkID"));
                    artwork.setTitle(resultSet.getString("Title"));
                    artwork.setDesc(resultSet.getString("Description"));
                    artwork.setCreationDate(resultSet.getDate("CreationDate"));
                    artwork.setMedium(resultSet.getString("Medium"));
                    artwork.setImageURL(resultSet.getString("ImageURL"));
                    artworks.add(artwork);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception or throw a custom exception if needed
        }

        return artworks;
    }

    @Override
    public boolean addArtworkToFavorite(int userId, int artworkId) {
        if (!isLoggedIn) {
            // User is not logged in, cannot add to favorites
            return false;
        }

        String query = "INSERT INTO User_Favorite_Artwork (UserID, ArtworkID) VALUES (?, ?)";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, userId);
            preparedStatement.setInt(2, artworkId);

            int rowsAffected = preparedStatement.executeUpdate();
            return rowsAffected > 0; // Return true if the artwork is added to favorites successfully
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception or throw a custom exception if needed
            return false;
        }
    }

    @Override
    public boolean removeArtworkFromFavorite(int userId, int artworkId) {
        if (!isLoggedIn) {
            // User is not logged in, cannot remove from favorites
            return false;
        }

        String query = "DELETE FROM User_Favorite_Artwork WHERE UserID = ? AND ArtworkID = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, userId);
            preparedStatement.setInt(2, artworkId);

            int rowsAffected = preparedStatement.executeUpdate();
            return rowsAffected > 0; // Return true if the artwork is removed from favorites successfully
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception or throw a custom exception if needed
            return false;
        }
    }

    @Override
    public List<Artwork> getUserFavoriteArtworks(int userId) {
        if (!isLoggedIn) {
            // User is not logged in, cannot retrieve favorite artworks
            return Collections.emptyList();
        }

        List<Artwork> favoriteArtworks = new ArrayList<>();
        String query = "SELECT A.* FROM Artwork A " +
                       "JOIN User_Favorite_Artwork UFA ON A.ArtworkID = UFA.ArtworkID " +
                       "WHERE UFA.UserID = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, userId);

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                while (resultSet.next()) {
                    Artwork artwork = new Artwork();
                    artwork.setArtworkId(resultSet.getInt("ArtworkID"));
                    artwork.setTitle(resultSet.getString("Title"));
                    artwork.setDesc(resultSet.getString("Description"));
                    artwork.setCreationDate(resultSet.getDate("CreationDate"));
                    artwork.setMedium(resultSet.getString("Medium"));
                    artwork.setImageURL(resultSet.getString("ImageURL"));
                    favoriteArtworks.add(artwork);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception or throw a custom exception if needed
        }

        return favoriteArtworks;
    }

	@Override
    public boolean login(String username, String password) throws UserNotFoundException {
        String query = "SELECT * FROM users WHERE username = ? AND password = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, username);
            preparedStatement.setString(2, password);

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                return resultSet.next();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception or throw a custom exception if needed
            return false;
        }
    }
	@Override
    public boolean register(String username, String password) {
        String query = "INSERT INTO users (username, password) VALUES (?, ?)";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, username);
            preparedStatement.setString(2, password);

            int rowsAffected = preparedStatement.executeUpdate();
            return rowsAffected > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }
	@Override
    public List<Artist> searchArtists(String keyword) {
        List<Artist> artists = new ArrayList<>();
        String query = "SELECT * FROM artist WHERE Name LIKE ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setString(1, "%" + keyword + "%");

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                while (resultSet.next()) {
                    Artist artist = new Artist();
                    artist.setArtistId(resultSet.getInt("ArtistID"));
                    artist.setName(resultSet.getString("Name"));
                    artist.setBiography(resultSet.getString("Biography"));
                    // Set other fields...

                    artists.add(artist);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception or throw a custom exception if needed
        }

        return artists;
    }
	
	@Override
    public List<Gallery> getAllGalleries() {
        List<Gallery> galleries = new ArrayList<>();
        String query = "SELECT * FROM gallery";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query);
             ResultSet resultSet = preparedStatement.executeQuery()) {

            while (resultSet.next()) {
                Gallery gallery = new Gallery();
                gallery.setGalleryId(resultSet.getInt("GalleryID"));
                gallery.setName(resultSet.getString("Name"));
                gallery.setDesc(resultSet.getString("Description"));
                // Set other fields...

                galleries.add(gallery);
            }

        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception or throw a custom exception if needed
        }

        return galleries;
    }
	
	@Override
    public User getUserProfile(int userId) {
        User user = null;
        String query = "SELECT * FROM user WHERE UserID = ?";
        try (PreparedStatement preparedStatement = connection.prepareStatement(query)) {
            preparedStatement.setInt(1, userId);

            try (ResultSet resultSet = preparedStatement.executeQuery()) {
                if (resultSet.next()) {
                    user = new User();
                    user.setUserId(resultSet.getInt("UserID"));
                    user.setUsername(resultSet.getString("Username"));
                    user.setEmail(resultSet.getString("Email"));
                    user.setFirstName(resultSet.getString("First_Name"));
                    user.setLastName(resultSet.getString("Last_Name"));
                    user.setDob(resultSet.getDate("DateOfBirth"));
                    // Set other fields...
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            // Handle the exception or throw a custom exception if needed
        }

        return user;
    }
	
	@Override
    public void logout() {
        isLoggedIn=false;
        System.out.println("Now you are Logged out...");
    }

}
